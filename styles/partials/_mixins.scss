/* ==========================================================================
   Mixins
   ========================================================================== */

/*
 * Mixin for easy media queries
 * @include bp(tablet) { SCSS here }
*/
@mixin bp($point) {
	@if $point == large-desk {
		@media (min-width : 1200px) { @content; }
	}
	@if $point == desk {
		@media (min-width : 992px) { @content; }
	}
	@if $point == tablet {
		@media (min-width : 768px) { @content; }
	}
	@if $point == phone {
		@media (max-width : 767px) { @content; }
	}
}

/*
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
}

/*
 * Mixin for basic CSS triangles
 * @include triangle(up, #000, 50px)
*/
@mixin triangle($direction:up, $color:#000, $size:100px) {
	@if($direction == up) {
		border-color: transparent transparent $color;
		border-style: solid;
		border-width: 0 $size $size;
		height: 0;
		width: 0;
	}
	@if($direction == down) {
		border-color: $color transparent transparent transparent;
		border-style: solid;
		border-width: $size;
		height:0;
		width:0;
	}
	@if($direction == left) {
		border-color: transparent $color transparent transparent;
		border-style: solid;
		border-width: $size $size $size 0;
		height: 0;
		width: 0;
	}
	@if($direction == right) {
		border-color: transparent transparent transparent $color;
		border-style: solid;
		border-width: $size 0 $size $size;
		height:0;
		width:0;
	}
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */

@mixin fontface($font-family, $font-url, $font-name) {
	@font-face {
		font: {
			family: $font-family;
			style: normal;
			weight: normal;
		}
		src: url($font-url + '/' + $font-name + '.eot');
		src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
			 url($font-url + '/' + $font-name + '.woff') format('woff'),
			 url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
			 url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
	}
}

// This let us use rems and provide a pixel fallback for non-supportive browsers

$baseline-px: 16px;

@mixin rem($property, $px-values) {
    $baseline-rem: $baseline-px / 1rem * 1;
    #{$property}: $px-values;
    @if type-of($px-values) == "number" {
        #{$property}: $px-values / $baseline-rem; }
    @else {
        $rem-values: ();
    @each $value in $px-values {
        @if $value == 0 or type-of( $value ) != "number" {
            $rem-values: append($rem-values, $value); }
        @else {
            $rem-values: append($rem-values, $value / $baseline-rem);
        }
    }
    #{$property}: $rem-values; }
}

/*
 * Apply a CSS3 transition
 *
 * $property The property you want to animate, eg opacity
 * $duration The duration of the animation, eg 1s
 * $ms Include -ms-transition; default is false because IE does not support transitionEnd callback
 *
 * @include transition(opacity, 0.5s);
 */

@mixin transition($property, $duration, $ms: false) {
	-webkit-transition: $property $duration ease-in-out;
	-moz-transition: $property $duration ease-in-out;
	-o-transition: $property $duration ease-in-out;
	@if ($ms) {
		-ms-transition: $property $duration ease-in-out;
	}
	transition: $property $duration ease-in-out;
}

@mixin transitionLong($property, $duration, $easing:ease-in-out, $delay:false) {
	@include transitionProperty($property);
	@include transitionDuration($duration);
	
	@if($delay) {
		@include transitionDelay($delay);
	}
	
	@if($easing) {
		@include transitionTimingFunction($easing);
	}
}

/*
 * Apply a CSS3 transition-delay
 * @include transitionDelay(2s);
 */
@mixin transitionDelay($delay) {
	-webkit-transition-delay: $delay;
	-moz-transition-delay: $delay;
	-o-transition-delay: $delay;
	-ms-transition-delay: $delay;
	transition-delay: $delay;
}

/*
 * Apply a CSS3 transition-duration
 * @include transitionDuration(1s);
 */
@mixin transitionDuration($duration) {
	-webkit-transition-duration: $duration;
	-moz-transition-duration: $duration;
	-o-transition-duration: $duration;
	-ms-transition-duration: $duration;
	transition-duration: $duration;
}

/*
 * Apply a CSS3 transition-property
 * @include transitionProperty(opacity);
 * @include transitionProperty((height, width)); Multiple properties can be passed in surrounded by brackets
 */
@mixin transitionProperty($property) {
	-webkit-transition-property: $property;
	-moz-transition-property: $property;
	-o-transition-property: $property;
	-ms-transition-property: $property;
	transition-property: $property;
}

/*
 * Apply a CSS3 transition-timing-function
 * @include transitionTimingFunction(easing);
 */
@mixin transitionTimingFunction($easing) {
	-webkit-transition-timing-function: $easing;
	-moz-transition-timing-function: $easing;
	-o-transition-timing-function: $easing;
	-ms-transition-timing-function: $easing;
	transition-timing-function: $easing;
}

// generic transform
@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}

// CSS-only multi-line ellipsis with generated content
// yields `position:relative`, so remember to declare an eventual `position:absolute/fixed` *after* including this mixin
@mixin limitLines(
    $maxLinesPortrait, // Mandatory: The number of lines after which the clipping should take action.
    $maxLinesLandscape: $maxLinesPortrait, // You may provide a different line limit for landscape orientation.
        // Note that 'portrait' is our default orientation. However, if you omit $maxLinesLandscape,
        // the value of $maxLinesPortrait is used for whatever orientation (that is, without a media query).
 
    $fgCol: #191919, // Set this to the color of the text element you want to clip.
    $bgCol: #f9f9f9, // Set this to the background color of the text element you want to clip.
    $lineHeight: 1.3 // Provide the (unitless!) line-height of the text element to help position the ellipsis correctly.
) {
    position: relative;
    overflow: hidden;
 
    // root element class added via JS feature detection
    .webkit-line-clamp & {
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-box-orient: vertical;
 
        // always remember:
        // http://alistapart.com/article/every-time-you-call-a-proprietary-feature-css3-a-kitten-dies
        -webkit-line-clamp: $maxLinesPortrait;
 
        @if($maxLinesLandscape != $maxLinesPortrait) {
            @media screen and (orientation:landscape) {
                -webkit-line-clamp: $maxLinesLandscape;
            }
        }
    }
 
    html:not(.webkit-line-clamp) & {
        max-height: $maxLinesPortrait * $lineHeight * 1em + 0em;
 
        // Pseudo-element containing the ellipsis (see below)
        &::before {
            top: ($maxLinesPortrait - 1) * $lineHeight * 1em + 0em;
        }
 
        @if($maxLinesLandscape != $maxLinesPortrait) {
            @media screen and (orientation:landscape) {
                max-height: $maxLinesLandscape * $lineHeight * 1em;
 
                &::before {
                    top: ($maxLinesLandscape - 1) * $lineHeight * 1em;
                }
            }
        }
 
        // Pseudo-element containing the ellipsis, as well as a soft gradient to make in-word ellipses look less harsh.
        &::before {
            @extend %limit-lines-ellipsis;
            color: transparentize($fgCol, 0.7);
                // No -ms- support in Compass? Strange!
                background: -ms-linear-gradient(left, transparentize($bgCol, 1), $bgCol 2em);
                background: linear-gradient(left, transparentize($bgCol, 1), $bgCol 2em);
            //@include background(linear-gradient(left, transparentize($bgCol, 1), $bgCol 2em));
        }
 
        &::after {
            @extend %limit-lines-filler;
            background: $bgCol;
        }
    }
}
 
// The ellipsis itself.
// Fine-tune the balance between text clipped a bit too early vs. the probability of slightly orphaned ellipses
// via the min-width property: Higher = text clipped earlier, less orphaned ellipses. And vice versa.
%limit-lines-ellipsis {
    min-width: 16%;
    content: "â€¦";
    position: absolute;
    right: 0;
    padding-left: 2em; // for the gradient
}
 
// Pseudo-element containing a good amount of whitespace.
// This is appended to the text to be clipped, in order to overlay (and thus hide) a superfluous ellipsis
// occurring when the text fits exactly into the number of lines specified.
%limit-lines-filler {
    // generate a good amount of alternating normal spaces and non-breaking spaces
    $whitespace: "";
    @for $i from 1 through 1024 {
        $whitespace: $whitespace + "  ";
    }
    content: $whitespace;
    display: inline;
    letter-spacing: 1em;
    position: relative;
    z-index: 1;
    // make this a bit smaller to avoid cropping of descenders from the line above
    font-size: 75%;
};
